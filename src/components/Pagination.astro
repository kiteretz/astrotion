---
export type Props = {
  page: number;
  pageCount: number;
  base?: string;
};

const { page, pageCount, base } = Astro.props;

function getPageUrl(page: number, base = ""): string {
  return base + (page === 1 ? "/" : `/pages/${page}/`);
}

// https://gist.github.com/kottenator/9d936eb3e4e3c3e02598
function pagination(current: number, last: number) {
  const delta = 2,
    left = current - delta,
    right = current + delta + 1,
    range: number[] = [],
    rangeWithDots: number[] = [];
  let l: number | undefined;

  for (let i = 1; i <= last; i++) {
    if (i == 1 || i == last || (i >= left && i < right)) {
      range.push(i);
    }
  }

  for (let i of range) {
    if (l) {
      if (i - l === 2) {
        rangeWithDots.push(l + 1);
      } else if (i - l !== 1) {
        rangeWithDots.push(NaN);
      }
    }
    rangeWithDots.push(i);
    l = i;
  }

  return rangeWithDots;
}

const pages = pagination(page, pageCount);
const prevPage: number | undefined = page > 1 ? page - 1 : undefined;
const nextPage: number | undefined = page < pageCount ? page + 1 : undefined;
---

<section class="flex justify-center space-x-8 pt-16 text-xl font-bold">
  {prevPage && <a href={getPageUrl(prevPage, base)}>&larr; Prev</a>}
  {
    pages.map((p) =>
      isNaN(p) || p === page ? (
        <span class="font-normal text-gray-600">{isNaN(p) ? "..." : p}</span>
      ) : (
        <a href={getPageUrl(p, base)}>{p}</a>
      ),
    )
  }
  {nextPage && <a href={getPageUrl(nextPage, base)}>Next &rarr;</a>}
</section>
